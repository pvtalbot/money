// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateExpenseInput struct {
	Amount     int       `json:"amount"`
	Date       time.Time `json:"date"`
	CategoryID string    `json:"categoryId"`
}

type CreateRevenueInput struct {
	Amount int       `json:"amount"`
	Date   time.Time `json:"date"`
}

type CreateUserInput struct {
	Name      string `json:"name"`
	Password  string `json:"password"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type DeleteExpenseInput struct {
	ID string `json:"id"`
}

type DeleteRevenueInput struct {
	ID string `json:"id"`
}

type Expense struct {
	ID       string           `json:"id"`
	Amount   int              `json:"amount"`
	Date     time.Time        `json:"date"`
	Category *ExpenseCategory `json:"category"`
}

type ExpenseSum struct {
	Amount    int       `json:"amount"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type GetExpensesInput struct {
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type GetExpensesSumInput struct {
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
	GroupBy   Duration  `json:"groupBy"`
}

type GetRevenuesInput struct {
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Revenue struct {
	ID     string    `json:"id"`
	Amount int       `json:"amount"`
	Date   time.Time `json:"date"`
}

type Token struct {
	AuthToken    string `json:"authToken"`
	RefreshToken string `json:"refreshToken"`
}

type UpdateExpenseInput struct {
	ID         string     `json:"id"`
	Amount     *int       `json:"amount"`
	Date       *time.Time `json:"date"`
	CategoryID *string    `json:"categoryId"`
}

type UpdateRevenueInput struct {
	ID     string     `json:"id"`
	Amount *int       `json:"amount"`
	Date   *time.Time `json:"date"`
}

type Duration string

const (
	DurationMonth Duration = "MONTH"
	DurationYear  Duration = "YEAR"
)

var AllDuration = []Duration{
	DurationMonth,
	DurationYear,
}

func (e Duration) IsValid() bool {
	switch e {
	case DurationMonth, DurationYear:
		return true
	}
	return false
}

func (e Duration) String() string {
	return string(e)
}

func (e *Duration) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Duration(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Duration", str)
	}
	return nil
}

func (e Duration) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
