# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: ID!
  name: String!
  firstName: String!
  lastName: String!
  expensesCategories: [ExpenseCategory]
}

type Expense {
  id: ID!
  amount: Int!
  date: Time!
  category: ExpenseCategory!
}

type Revenue {
  id: ID!
  amount: Int!
  date: Time!
}

type ExpenseSum {
  amount: Int!
  startDate: Time!
  endDate: Time!
}

type ExpenseCategory {
  id: ID!
  name: String
}

type Query {
  me: User!
  expenses(input: GetExpensesInput!): [Expense]!
  revenues(input: GetRevenuesInput!): [Revenue]!
  expensesSum(input: GetExpensesSumInput!): [ExpenseSum]!
  validateAccessToken(accessToken: String!): Boolean!
}

input GetExpensesInput {
  startDate: Time!
  endDate: Time!
}

input GetExpensesSumInput {
  startDate: Time!
  endDate: Time!
  groupBy: Duration!
}

input GetRevenuesInput {
  startDate: Time!
  endDate: Time!
}

type Mutation {
  login(input: Login!): String!
  createUser(input: CreateUserInput!): String!
  createExpense(input: CreateExpenseInput!): Expense!
  deleteExpense(input: DeleteExpenseInput!): Expense!
  updateExpense(input: UpdateExpenseInput!): Expense!
  createRevenue(input: CreateRevenueInput!): Revenue!
  deleteRevenue(input: DeleteRevenueInput!): Revenue!
  updateRevenue(input: UpdateRevenueInput!): Revenue!
}

input DeleteExpenseInput {
  id: ID!
}

input DeleteRevenueInput {
  id: ID!
}

input UpdateExpenseInput {
  id: ID!
  amount: Int
  date: Time
  categoryId: ID
}

input UpdateRevenueInput {
  id: ID!
  amount: Int
  date: Time
}

input CreateUserInput {
  name: String!
  password: String!
  firstName: String!
  lastName: String!
}

input CreateExpenseInput {
  amount: Int!
  date: Time!
  categoryId: ID!
}

input CreateRevenueInput {
  amount: Int!
  date: Time!
}

input Login  {
  username: String!
  password: String!
}

scalar Time

enum Duration {
  MONTH,
  YEAR,
}